<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
  default-lazy-init="true">
  <bean id="mysqlSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="routinDataSource" />
    <property name="configLocation" value="classpath:/spring/mybatis.xml" />
    <!-- 自动扫描entity目录, 省掉xml里的手工配置 -->
    <property name="typeAliasesPackage" value="com.monkey.test.spring.transaction.entity" />
    <!-- 显式指定Mapper文件位置 -->
    <property name="mapperLocations">
      <list>
        <value>classpath*:/mybatis/**/**/*Mapper.xml</value>
      </list>
    </property>
  </bean>

  <bean id="routinDataSource" class="com.monkey.test.spring.transaction.utils.datasource.SelfRutinDataSource">
    <property name="targetDataSources">
      <map>
        <entry key="write" value-ref="mysqlDataSourceWrite"></entry>
        <entry key="read" value-ref="mysqlDataSourceRead"></entry>
      </map>
    </property>
  </bean>

  <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="sqlSessionFactoryBeanName" value="mysqlSqlSessionFactory" />
    <property name="basePackage"
      value="com.monkey.test.spring.transaction.repository" />
    <!-- 优化速度 -->
    <property name="annotationClass" value="com.monkey.test.spring.transaction.utils.JYBatis" />
  </bean>

  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath*:/dbconfig.properties</value>
      </list>
    </property>
  </bean>

  <!-- 事物配置-->
<!--  <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="mysqlDataSource"></property>
  </bean>

  <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="insert*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut id="transactinPointcut" expression="execution(* com.monkey.test.spring.transaction.service.*.*(..))"/>
    <aop:advisor pointcut-ref="transactinPointcut" advice-ref="serviceAdvice"/>
  </aop:config>-->


  <!-- 配置数据源 -->
  <bean name="mysqlDataSourceWrite" class="com.alibaba.druid.pool.DruidDataSource"
    init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.mysql.driver}" />
    <property name="url" value="${jdbc.mysql.url}" />
    <property name="username" value="${jdbc.mysql.username}" />
    <property name="password" value="${jdbc.mysql.password}" />
    <!-- 初始化连接数量 -->
    <property name="initialSize" value="${druid.initialSize}" />
    <!-- 最大并发连接数 -->
    <property name="maxActive" value="${druid.maxActive}" />
    <!-- 最大空闲连接数 -->
    <!-- <property name="maxIdle" value="${druid.maxIdle}" /> -->
    <!-- 最小空闲连接数 -->
    <property name="minIdle" value="${druid.minIdle}" />
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${druid.maxWait}" />
    <!-- 超过时间限制是否回收 -->
    <property name="removeAbandoned" value="${druid.removeAbandoned}" />
    <!-- 超过时间限制多长； -->
    <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
    <property name="validationQuery" value="${druid.validationQuery}" />
    <!-- 申请连接的时候检测 -->
    <property name="testWhileIdle" value="${druid.testWhileIdle}" />
    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnBorrow" value="${druid.testOnBorrow}" />
    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnReturn" value="${druid.testOnReturn}" />
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
    <property name="maxPoolPreparedStatementPerConnectionSize"
      value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
    <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
    <property name="proxyFilters">
      <list>
        <ref bean="stat-filter" />
        <ref bean="log4j2Filter" />
      </list>
    </property>
  </bean>

  <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
    <property name="slowSqlMillis" value="2000" />
    <property name="logSlowSql" value="true" />
    <!-- 	<property name="mergeSql" value="true" /> -->
    <!-- 是否合并  线上应该改为true  暂时false方便调试   上面的阈值也需要修改-->
    <property name="mergeSql" value="false" />
  </bean>

  <bean id="log4j2Filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
    <property name="connectionLogEnabled" value="false"/>
    <property name="statementLogEnabled" value="false"/>
    <property name="resultSetLogEnabled" value="true"/>
    <property name="statementExecutableSqlLogEnable" value="true"/>
  </bean>

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="mysqlDataSourceWrite"></property>
  </bean>
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut id="transactionPointcut" expression="execution(* com.monkey.test.spring.transaction.service.*.*(..))"/>
    <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
  </aop:config>


  <!-- 配置数据源 -->
  <bean name="mysqlDataSourceRead" class="com.alibaba.druid.pool.DruidDataSource"
    init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.mysql.driver}" />
    <property name="url" value="${jdbc.mysql.url.read}" />
    <property name="username" value="root" />
    <property name="password" value="Cctf!1@2#3" />
    <!-- 初始化连接数量 -->
    <property name="initialSize" value="${druid.initialSize}" />
    <!-- 最大并发连接数 -->
    <property name="maxActive" value="${druid.maxActive}" />
    <!-- 最大空闲连接数 -->
    <!-- <property name="maxIdle" value="${druid.maxIdle}" /> -->
    <!-- 最小空闲连接数 -->
    <property name="minIdle" value="${druid.minIdle}" />
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${druid.maxWait}" />
    <!-- 超过时间限制是否回收 -->
    <property name="removeAbandoned" value="${druid.removeAbandoned}" />
    <!-- 超过时间限制多长； -->
    <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
    <property name="validationQuery" value="${druid.validationQuery}" />
    <!-- 申请连接的时候检测 -->
    <property name="testWhileIdle" value="${druid.testWhileIdle}" />
    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnBorrow" value="${druid.testOnBorrow}" />
    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnReturn" value="${druid.testOnReturn}" />
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
    <property name="maxPoolPreparedStatementPerConnectionSize"
      value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
    <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
    <property name="proxyFilters">
      <list>
        <ref bean="stat-filter" />
        <ref bean="log4j2Filter" />
      </list>
    </property>
  </bean>
</beans>
